#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import requests
import json
import base64
from time import sleep
from shutil import which

api_url = 'https://v2api.savemp3.cc/v1/'
proxy = {
    'http': 'http://127.0.0.1:1080',
    'https': 'http://127.0.0.1:1080'
}

def build_header_and_data(soundcloud_url):
    site_url = 'https://savemp3.cc/soundcloud-downloader/'
    soundcloud_url_b64 = base64.b64encode(soundcloud_url.encode()).decode()
    req_header = {
        'Content-Type': 'application/json',
        'Origin': 'https://savemp3.cc',
        'Referer': site_url + soundcloud_url_b64
    }
    req_data = {
        "type": "crawler",
        "params": { "video_url": soundcloud_url }
    }
    return req_header, json.dumps(req_data)


def get_resource_info(soundcloud_url):
    header, data = build_header_and_data(soundcloud_url)

    r = requests.post(url=api_url + 'job', headers=header, data=data, proxies=proxy)
    job = json.loads(r.text)
    assert job['code'] == 0, f"failed to get job: {r.text}"

    r = requests.get(url=api_url + 'check', headers=header, params=job['data'], proxies=proxy)
    check = json.loads(r.text)
    assert check['code'] == 0, f"failed to get url: {r.text}"
    print(check)

    check = check['data']
    print(f"state: {check['state']}")

    while check['state'] != 'completed':
        sleep(0.5)
        check = get_resource_info(soundcloud_url)
        print(f"state: {check['state']}")

    return check


def get_resource_data(resource_info):
    image_url = resource_info['thumbnail']
    sound_url = resource_info['formats'][0]['url']

    print('downloading image...')
    r = requests.get(image_url, proxies=proxy)
    image_data = r.content

    print('downloading sound...')
    r = requests.get(sound_url, proxies=proxy)
    sound_data = r.content

    return {
        'image': {
            'name': image_url[image_url.find('artworks'):],
            'data': image_data
        },
        'sound': {
            'name': resource_info['title'],
            'data': sound_data,
            'format': resource_info['formats'][0]['ext']
        }
    }


def add_albumart(sound_name, image_name):
    if which('ffmpeg') == None:
        return

    os.rename(sound_name, "bak." + sound_name)
    cmd = 'ffmpeg -i "{sound}" -i "{img}" -map 0:0 -map 1:0 -codec copy -id3v2_version 3 -metadata:s:v title="Album cover" -metadata:s:v comment="Cover (font)" -loglevel quiet -y "{output}"'
    os.system(cmd.format(sound="bak."+sound_name, img=image_name, output=sound_name))
    os.remove("bak." + sound_name)


def dump_data(resource):
    with open(image_name:=resource['image']['name'], 'wb') as f:
        f.write(resource['image']['data'])
    with open(sound_name:=f"{resource['sound']['name']}.{resource['sound']['format']}".replace('/', ''), 'wb') as f:
        f.write(resource['sound']['data'])
    # with open(sound_name:=f"a.mp3", 'wb') as f:
        # f.write(resource['sound']['data'])
    add_albumart(sound_name, image_name)


if __name__ == '__main__':
    assert len(sys.argv) == 2, 'usage: python3 soundcloud.py <url>'
    url = sys.argv[1]
    
    assert url.find('https://soundcloud.com/') == 0, 'my name is SOUNDCLOUD.PY'

    resource_info = get_resource_info(url)
    resource = get_resource_data(resource_info)
    dump_data(resource)

