#!/usr/bin/env python3


import os
import json
import random
import string
import argparse

from QingQiz import utils
from QingQiz import cipher
from getpass import getpass


def loadPwl(path='~/.local/share/getpw.json'):
    try:
        with open(os.path.expanduser(path)) as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.decoder.JSONDecodeError:
        return {}


def savePwl(pwl, path='~/.local/share/getpw.json'):
    try:
        os.rename(os.path.expanduser(path), '/tmp/getpw.json')
    except:
        pass

    with open(os.path.expanduser(path), 'w+') as f:
        json.dump(pwl, f)


def insertPw(pwl: dict, key: str, site: str, username: str, password: str):
    if pwl.get(site) is None:
        pwl[site] = {}
    pwl[site][username] = cipher.encrypt(key, password)
    return pwl


def getPw(pwl, key, site):
    os.system('clear')

    res = []
    for x in pwl:
        if site not in x:
            continue
        for i in pwl[x]:
            res.append((i, pwl[x][i], x))
    res = map(lambda x: f'site: {x[2]}\nusername: {x[0]}\npassword: {cipher.decrypt(key, x[1])}', res)
    print('=' * 60 + '\n' + ('\n' + '-' * 60 + '\n').join(res) + '\n' + '=' * 60 + '\n')
    try:
        input('\nENTER to exit...')
    except:
        pass
    finally:
        os.system('reset')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('site', nargs='?', help='site name')
    parser.add_argument('-i', '--insert', type=str, help='insert a password')
    parser.add_argument('-g', '--generate', type=str, help='generate a password')

    args = parser.parse_args()

    key, res = utils.auth()
    assert res, 'Authentication Error'

    pwl = loadPwl()

    def insert():
        username = input('username: ')
        a = getpass('password: ')
        b = getpass('password again: ')
        assert a == b, 'abort.'

        insertPw(pwl, key, args.insert, username, a)

        savePwl(pwl)
        exit(0)

    def generate():
        username = input('username: ')

        s = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choices(s, k=16))
        print('password:', password)

        a = input('Accept (Y/n): ').strip().lower()
        if not a or a != 'n':
            insertPw(pwl, key, args.generate, username, password)
        else:
            print('abort.')
            exit(0)

        savePwl(pwl)
        exit(0)

    try:
        if args.insert:
            insert()
        if args.generate:
            generate()
    except (KeyboardInterrupt, EOFError):
        print('abort')
        exit(0)

    if args.site:
        getPw(pwl, key, args.site)
