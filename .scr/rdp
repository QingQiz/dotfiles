#!/usr/bin/env python

import argparse
import os


def is_ip(s):
    try:
        port = s.split(':')[1]
        try:
            port = int(port)
            if 0 <= port <= 65535:
                pass
            else:
                raise argparse.ArgumentTypeError("IP is invalid")
        except ValueError:
            raise argparse.ArgumentTypeError("IP is invalid")
    except IndexError:
        pass

    ip = s.split(':')[0].split('.')
    if len(ip) != 4:
        raise argparse.ArgumentTypeError("IP is invalid")
    for i in ip:
        try:
            j = int(i)
            if 0 <= j <= 255:
                pass
            else:
                raise argparse.ArgumentTypeError("IP is invalid")
        except ValueError:
            raise argparse.ArgumentTypeError("IP is invalid")
    return s


parse = argparse.ArgumentParser(
    prog='rdp',
    usage='rdp [IP][:Port] [OPTION]...'
)
parse.add_argument(
    'IP', type=is_ip
)
parse.add_argument(
    '-u', '--user', nargs=1, required=True,
    help='users'
)
parse.add_argument(
    '-mm', '--multi-monitors', action='store_true',
    help='use multi monitors'
)
parse.add_argument(
    '-m', '--monitors', nargs=1,
    help='Select monitors to use\texample: 1,2,3'
)
parse.add_argument(
    '-s', '--sound', action='store_true',
    help='enable sound'
)
parse.add_argument(
    '-d', '--drive', nargs=1,  # default='angel,/home/angel',
    help='redirect directory <path> as named share <name>\texample: name,path'
)
parse.add_argument(
    '-au', '--auto-reconnect', action='store_true',
    help='Enable Automatic reconnection'
)
parse.add_argument(
    '-aun', '--auto-reconnect-max-retries', nargs=1,
    help='Automatic reconnection maximum retries, [0, 1000]'
)
args = parse.parse_args()


cmd = 'xfreerdp /u:{user} /v:{ip} /f -floatbar'.format(
    user=args.user[0], ip=args.IP if args.IP.find(':') > 0 else args.IP + ':3389'
)
if args.multi_monitors:
    cmd += ' /multimon'
if args.monitors is not None:
    cmd += ' /monitors:' + args.monitors[0]
if args.sound:
    cmd += ' /sound:sys:alsa'
if args.drive is not None:
    cmd += ' /drive:' + args.drive[0]
if args.auto_reconnect:
    cmd += ' /auto-reconnect'
if args.auto_reconnect_max_retries is not None:
    cmd += ' /auto-reconnect-max-retries:' + args.auto_reconnect_max_retries[0]

print(cmd)
os.system(cmd)
